#!/usr/bin/env python3
"""
Generated by DNNE - Main Entry Point
Metadata: None
"""

import sys
import argparse
from pathlib import Path

# Add current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

import asyncio
import logging

from framework.base import GraphRunner
from nodes import *

def configure_logging(verbose=False):
    """Configure logging based on verbose flag"""
    if verbose:
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(message)s')
    else:
        # Only show WARNING and above for quiet mode
        logging.basicConfig(level=logging.WARNING, format='%(asctime)s - %(name)s - %(message)s')

async def main():
    """Main execution function"""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='DNNE Generated Training')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Enable verbose batch-level logging')
    parser.add_argument('--test-mode', action='store_true',
                       help='Run in test mode with limited duration and performance tracking')
    args = parser.parse_args()

    # Set global verbose flag for nodes to access
    import builtins
    builtins.VERBOSE = args.verbose
    configure_logging(args.verbose)

    print("🚀 Starting DNNE Queue-Based Execution")
    if args.verbose:
        print("📝 Verbose mode enabled - showing all batch details")
    else:
        print("📊 Quiet mode - showing epoch summaries only")
    print("=" * 60)

    # Create nodes
    node_1 = MNISTDatasetNode_1("1")

    # Create runner
    runner = GraphRunner()

    # Add nodes to runner
    runner.add_node(node_1)

    # Wire connections
    connections = [
    ]
    runner.wire_nodes(connections)

    # Run the graph
    try:
        if args.test_mode:
            print('🧪 Test mode: Running for 30 seconds with performance tracking')
            import time
            start_time = time.time()
            await runner.run(duration=30.0)  # Run for 30 seconds in test mode
            end_time = time.time()
            print(f'✅ Test mode completed in {end_time - start_time:.1f} seconds')
        else:
            # Run indefinitely (Ctrl+C to stop)
            await runner.run()
    except KeyboardInterrupt:
        print('\n🛑 Stopped by user')

    # Show final statistics
    print('\n📊 Final Statistics:')
    stats = runner.get_stats()
    for node_id, node_stats in stats.items():
        print(f'  {node_id}: {node_stats["compute_count"]} computations, '
              f'avg time: {node_stats["last_compute_time"]:.3f}s')


if __name__ == '__main__':
    asyncio.run(main())